// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/gateway_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/gateway_service.go -destination=internal/tests/mocks/mock_gateway_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	"context"
	"reflect"

	"payment-gateway/db"

	"go.uber.org/mock/gomock"
)

// MockGatewayServiceInterface is a mock of GatewayServiceInterface interface.
type MockGatewayServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayServiceInterfaceMockRecorder
}

// MockGatewayServiceInterfaceMockRecorder is the mock recorder for MockGatewayServiceInterface.
type MockGatewayServiceInterfaceMockRecorder struct {
	mock *MockGatewayServiceInterface
}

// NewMockGatewayServiceInterface creates a new mock instance.
func NewMockGatewayServiceInterface(ctrl *gomock.Controller) *MockGatewayServiceInterface {
	mock := &MockGatewayServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGatewayServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayServiceInterface) EXPECT() *MockGatewayServiceInterfaceMockRecorder {
	return m.recorder
}

// GetTransactionStatus mocks base method.
func (m *MockGatewayServiceInterface) GetTransactionStatus(ctx context.Context, txID int) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionStatus", ctx, txID)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionStatus indicates an expected call of GetTransactionStatus.
func (mr *MockGatewayServiceInterfaceMockRecorder) GetTransactionStatus(ctx, txID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionStatus", reflect.TypeOf((*MockGatewayServiceInterface)(nil).GetTransactionStatus), ctx, txID)
}

// HandleCallback mocks base method.
func (m *MockGatewayServiceInterface) HandleCallback(ctx context.Context, gatewayTxnID, status string, transactionID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCallback", ctx, gatewayTxnID, status, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleCallback indicates an expected call of HandleCallback.
func (mr *MockGatewayServiceInterfaceMockRecorder) HandleCallback(ctx, gatewayTxnID, status, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCallback", reflect.TypeOf((*MockGatewayServiceInterface)(nil).HandleCallback), ctx, gatewayTxnID, status, transactionID)
}

// ProcessTransaction mocks base method.
func (m *MockGatewayServiceInterface) ProcessTransaction(ctx context.Context, tx db.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTransaction", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessTransaction indicates an expected call of ProcessTransaction.
func (mr *MockGatewayServiceInterfaceMockRecorder) ProcessTransaction(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTransaction", reflect.TypeOf((*MockGatewayServiceInterface)(nil).ProcessTransaction), ctx, tx)
}
