// Code generated by MockGen. DO NOT EDIT.
// Source: db/db_helpers.go
//
// Generated by this command:
//
//	mockgen -source=db/db_helpers.go -destination=internal/tests/mocks/mock_storage.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	"context"
	"reflect"

	"payment-gateway/db"

	"go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockStorage) CreateTransaction(ctx context.Context, tx db.Transaction) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, tx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockStorageMockRecorder) CreateTransaction(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockStorage)(nil).CreateTransaction), ctx, tx)
}

// GetGatewaysByCountry mocks base method.
func (m *MockStorage) GetGatewaysByCountry(ctx context.Context, countryID int) ([]db.Gateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGatewaysByCountry", ctx, countryID)
	ret0, _ := ret[0].([]db.Gateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGatewaysByCountry indicates an expected call of GetGatewaysByCountry.
func (mr *MockStorageMockRecorder) GetGatewaysByCountry(ctx, countryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGatewaysByCountry", reflect.TypeOf((*MockStorage)(nil).GetGatewaysByCountry), ctx, countryID)
}

// GetTransactionByID mocks base method.
func (m *MockStorage) GetTransactionByID(ctx context.Context, id int) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", ctx, id)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockStorageMockRecorder) GetTransactionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockStorage)(nil).GetTransactionByID), ctx, id)
}

// GetUserByID mocks base method.
func (m *MockStorage) GetUserByID(ctx context.Context, id int) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStorageMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStorage)(nil).GetUserByID), ctx, id)
}

// UpdateTransactionGateway mocks base method.
func (m *MockStorage) UpdateTransactionGateway(ctx context.Context, txID, gatewayID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionGateway", ctx, txID, gatewayID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransactionGateway indicates an expected call of UpdateTransactionGateway.
func (mr *MockStorageMockRecorder) UpdateTransactionGateway(ctx, txID, gatewayID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionGateway", reflect.TypeOf((*MockStorage)(nil).UpdateTransactionGateway), ctx, txID, gatewayID)
}

// UpdateTransactionStatus mocks base method.
func (m *MockStorage) UpdateTransactionStatus(ctx context.Context, txID int, status, gatewayTxnID, errorMsg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionStatus", ctx, txID, status, gatewayTxnID, errorMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransactionStatus indicates an expected call of UpdateTransactionStatus.
func (mr *MockStorageMockRecorder) UpdateTransactionStatus(ctx, txID, status, gatewayTxnID, errorMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionStatus", reflect.TypeOf((*MockStorage)(nil).UpdateTransactionStatus), ctx, txID, status, gatewayTxnID, errorMsg)
}
