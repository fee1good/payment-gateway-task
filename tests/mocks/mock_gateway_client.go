// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gateway/client.go
//
// Generated by this command:
//
//	mockgen -source=internal/gateway/client.go -destination=internal/tests/mocks/mock_gateway_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	"context"
	"reflect"

	"payment-gateway/internal/models"

	"go.uber.org/mock/gomock"
)

// MockGatewayClient is a mock of GatewayClient interface.
type MockGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayClientMockRecorder
}

// MockGatewayClientMockRecorder is the mock recorder for MockGatewayClient.
type MockGatewayClientMockRecorder struct {
	mock *MockGatewayClient
}

// NewMockGatewayClient creates a new mock instance.
func NewMockGatewayClient(ctrl *gomock.Controller) *MockGatewayClient {
	mock := &MockGatewayClient{ctrl: ctrl}
	mock.recorder = &MockGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayClient) EXPECT() *MockGatewayClientMockRecorder {
	return m.recorder
}

// ProcessPayment mocks base method.
func (m *MockGatewayClient) ProcessPayment(ctx context.Context, tx models.Transaction) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", ctx, tx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPayment indicates an expected call of ProcessPayment.
func (mr *MockGatewayClientMockRecorder) ProcessPayment(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockGatewayClient)(nil).ProcessPayment), ctx, tx)
}
